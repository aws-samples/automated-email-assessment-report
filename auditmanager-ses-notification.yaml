##################################################################################
#
#   Audit Manager:
#     Receiving Assessment Report Summary through email
#
#   @mlarrais
#
#   This solution sends an assessment report summary generated by AWS Audit Manager through email as an attachment
#
##################################################################################

---
AWSTemplateFormatVersion: '2010-09-09'
Description: |
  CloudFormation template for the Audit Manager blog post. In this blog post, the assessment report summary will be uploaded to Amazon S3 bucket and the user will receive a link to access this file in their email **WARNING** This template creates [AWS::SES::EmailIdentity, AWS::Lambda::Function, AWS::Logs::LogGroup] and related resources. You will be billed for the AWS resources used if you create a stack from this template.
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Source Email Address
        Parameters:
          - SourceEmail
          - RegisterSourceEmail
      - Label:
          default: Recipients Email Addresses
        Parameters:
          - AddrEmail1
          - RegisterAddrEmail1
          - AddrEmail2
          - RegisterAddrEmail2
          - AddrEmail3
          - RegisterAddrEmail3
      - Label:
          default: Report S3 Bucket
        Parameters:
          - ReportBucketName
    ParameterLabels:
      SourceEmail:
        default: Source Email Address
      RegisterSourceEmail:
        default: Register Source Email Address
      AddrEmail1:
        default: Email Address 1
      RegisterAddrEmail1:
        default: Register Email Address 1
      AddrEmail2:
        default: Email Address 2
      RegisterAddrEmail2:
        default: Register Email Address 2
      AddrEmail3:
        default: Email Address 3
      RegisterAddrEmail3:
        default: Register Email Address 3
      ReportBucketName:
        default: Report S3 Bucket Name

Parameters:
  ReportBucketName:
    Description: Specify the name of the Amazon S3 bucket where you want to receive the report.
    Type: String
  SourceEmail:
    Description: Specify the email address to use as a source for sending audit manager assessment reports
    Type: String
    AllowedPattern: '^$|(?i)^[A-Z0-9._%\+\-]+@[A-Z0-9.\-]+\.[A-Z]{2,}$'
    ConstraintDescription: Must provide a valid email address.
  RegisterSourceEmail:
    Description: Specify 'false' if the Source Email is already verified with AWS Simple Email Service
    Type: String
    AllowedValues:
      - false
      - true
    Default: true
  AddrEmail1:
    Description: Specify the first email address to use to receive the assessment report summary.
    Type: String
    AllowedPattern: '^$|(?i)^[A-Z0-9._%\+\-]+@[A-Z0-9.\-]+\.[A-Z]{2,}$'
    ConstraintDescription: Must provide a valid email address.
  RegisterAddrEmail1:
    Description: Specify 'true' to register Email Address 1 with AWS Simple Email Service
    Type: String
    AllowedValues:
      - false
      - true
  AddrEmail2:
    Description: Specify the email address to use to receive the assessment report summary.
    Type: String
    AllowedPattern: '^$|(?i)^[A-Z0-9._%\+\-]+@[A-Z0-9.\-]+\.[A-Z]{2,}$'
    ConstraintDescription: Must provide a valid email address.
  RegisterAddrEmail2:
    Description: Specify 'true' to register Email Address 2 with AWS Simple Email Service
    Type: String
    AllowedValues:
      - false
      - true
  AddrEmail3:
    Description: Specify the email address to use to receive the assessment report summary.
    Type: String
    AllowedPattern: '^$|(?i)^[A-Z0-9._%\+\-]+@[A-Z0-9.\-]+\.[A-Z]{2,}$'
    ConstraintDescription: Must provide a valid email address.
  RegisterAddrEmail3:
    Description: Specify 'true' to register Email Address 3 with AWS Simple Email Service
    Type: String
    AllowedValues:
      - false
      - true
Conditions:
  ShouldRegisterSourceEmail: !Equals
    - !Ref RegisterSourceEmail
    - Yes

  ShouldRegisterAddrEmail1: !Equals
    - !Ref RegisterAddrEmail1
    - Yes

  IsSecondEmail: !Not
    - !Equals
      - !Ref AddrEmail2
      - ''
  ShouldRegisterAddrEmail2: !And
    - !Condition IsSecondEmail
    - !Equals
        - !Ref RegisterAddrEmail2
        - Yes

  IsThirdEmail: !Not
    - !Equals
      - !Ref AddrEmail3
      - ''
  ShouldRegisterAddrEmail3: !And
    - !Condition IsThirdEmail
    - !Equals
        - !Ref RegisterAddrEmail3
        - Yes

Resources:
  AddrEmailIdentity1:
    Condition: ShouldRegisterAddrEmail1
    Type: AWS::SES::EmailIdentity
    Properties:
      EmailIdentity: !Ref AddrEmail1

  AddrEmailIdentity2:
    Condition: ShouldRegisterAddrEmail2
    Type: AWS::SES::EmailIdentity
    Properties:
      EmailIdentity: !Ref AddrEmail2

  AddrEmailIdentity3:
    Condition: ShouldRegisterAddrEmail3
    Type: AWS::SES::EmailIdentity
    Properties:
      EmailIdentity: !Ref AddrEmail3

  SourceSESConfig:
    Condition: ShouldRegisterSourceEmail
    Type: AWS::SES::EmailIdentity
    Properties:
      EmailIdentity: !Ref SourceEmail

  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          Effect: Allow
          Principal:
            Service:
              - lambda.amazonaws.com
          Action:
            - sts:AssumeRole
      Path: /
      Policies:
        - PolicyDocument:
            Statement:
              - Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Effect: Allow
                Resource: !Sub 'arn:${AWS::Partition}:logs:*:*:*'
            Version: '2012-10-17'
          PolicyName: !Sub '${AWS::StackName}-${AWS::Region}-AWSLambda-CW'
        - PolicyName: !Sub '${AWS::StackName}-${AWS::Region}-SourceAndAddrEmail1'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ses:SendRawEmail
                Resource:
                  - !Sub 'arn:${AWS::Partition}:ses:${AWS::Region}:${AWS::AccountId}:identity/${SourceEmail}'
                  - !Sub 'arn:${AWS::Partition}:ses:${AWS::Region}:${AWS::AccountId}:identity/${AddrEmail1}'
        - !If
          - IsSecondEmail
          - PolicyName: !Sub '${AWS::StackName}-${AWS::Region}-AddrEmail2'
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - ses:SendRawEmail
                  Resource:
                    - !Sub 'arn:${AWS::Partition}:ses:${AWS::Region}:${AWS::AccountId}:identity/${AddrEmail2}'
          - !Ref AWS::NoValue
        - !If
          - IsThirdEmail
          - PolicyName: !Sub '${AWS::StackName}-${AWS::Region}-AddrEmail3'
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - ses:SendRawEmail
                  Resource:
                    - !Sub 'arn:${AWS::Partition}:ses:${AWS::Region}:${AWS::AccountId}:identity/${AddrEmail3}'
          - !Ref AWS::NoValue
        - PolicyName: !Sub '${AWS::StackName}-${AWS::Region}-S3LambdaAccess'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:ListBucket
                Resource:
                  - !Sub 'arn:${AWS::Partition}:s3:::${ReportBucketName}/*'
                  - !Sub 'arn:${AWS::Partition}:s3:::${ReportBucketName}'

  S3CustomResource:
    Type: Custom::S3CustomResource
    Properties:
      ServiceToken: !GetAtt 'S3CustomLambda.Arn'
  S3CustomLambda:
    Type: AWS::Lambda::Function
    DependsOn: LogGroupCustomResourceS3
    Properties:
      Description: Custom Resource to create event notification in an existing Amazon S3 bucket.
      FunctionName: !Sub '${AWS::StackName}-${AWS::Region}-LambdaCustomResource'
      Handler: index.handler
      Role: !GetAtt 'AWSLambdaExecutionRole.Arn'
      Timeout: 360
      Runtime: python3.9
      Environment:
        Variables:
          s3lambda: !GetAtt 'SendEmail.Arn'
          the_bucket: !Ref 'ReportBucketName'
      Code:
        ZipFile: |
          import boto3
          import cfnresponse
          import os
          def handler(event, context):
              # Init ...
              the_event = event['RequestType']
              print("The event is: ", str(the_event))
              response_data = {}
              s_3 = boto3.client('s3')
              # Retrieve parameters
              s3_lambda = os.environ['s3lambda']
              the_bucket = os.environ['the_bucket']
              bucket_notification_configuration = {
                'LambdaFunctionConfigurations': [{
                    'Events': ['s3:ObjectCreated:Put'],
                    'Id': 'NotificationAssessmentReport',
                    'Filter':{
                      'Key':{
                        'FilterRules': [
                          {
                            'Name': 'suffix',
                            'Value': 'AssessmentReportSummary.pdf'
                          }
                        ]
                      }
                    },
                    'LambdaFunctionArn': s3_lambda
                }]
              }

              delete_bucket_notification_configuration = {
                'LambdaFunctionConfigurations':[]
              }

              try:
                if the_event in ('Create', 'Update'):
                    s_3.put_bucket_notification_configuration(Bucket=the_bucket, NotificationConfiguration=bucket_notification_configuration)
                elif the_event == 'Delete':
                    print("Deleting")
                    s_3.put_bucket_notification_configuration(Bucket=the_bucket, NotificationConfiguration=delete_bucket_notification_configuration)
                # Everything OK... send the signal back
                print("Operation successful!")
                cfnresponse.send(event,
                                  context,
                                  cfnresponse.SUCCESS,
                                  response_data)
              except Exception as e:
                  print("Operation failed...")
                  print(str(e))
                  response_data['Data'] = str(e)
                  cfnresponse.send(event,
                                   context,
                                   cfnresponse.FAILED,
                                   response_data)
  AWSLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
        Version: '2012-10-17'
      Path: /
      Policies:
        - PolicyDocument:
            Statement:
              - Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Effect: Allow
                Resource: !Sub 'arn:${AWS::Partition}:logs:*:*:*'
            Version: '2012-10-17'
          PolicyName: !Sub '${AWS::StackName}-${AWS::Region}-AWSLambda-CW'
        - PolicyDocument:
            Statement:
              - Action:
                  - s3:ListBucket
                  - s3:PutBucketNotification
                Effect: Allow
                Resource:
                  - !Sub 'arn:${AWS::Partition}:s3:::${ReportBucketName}/*'
                  - !Sub 'arn:${AWS::Partition}:s3:::${ReportBucketName}'
            Version: '2012-10-17'
          PolicyName: !Sub '${AWS::StackName}-${AWS::Region}-AWSLambda-S3'

  SendEmail:
    Type: AWS::Lambda::Function
    DependsOn: LogGroupSendEmailLambda
    Properties:
      Code:
        ZipFile: |
          import json
          import urllib.parse
          import boto3
          import logging
          import os
          import email
          from botocore.exceptions import ClientError
          from email.mime.multipart import MIMEMultipart
          from email.mime.text import MIMEText
          from email.mime.application import MIMEApplication

          #setting logger
          logger = logging.getLogger()
          logging.basicConfig(level=logging.INFO,
                              format='%(asctime)s: %(levelname)s: %(message)s')
          # Initiate boto3 client
          s3 = boto3.client('s3')
          ses = boto3.client('ses')

          def lambda_handler(event, context):
              sender = os.environ['source_email']
              recipient1 = os.environ['recipient1']
              recipient2 = os.environ['recipient2']
              recipient3 = os.environ['recipient3']

              if recipient2 == '' and recipient3 == '':
                  recipients = [recipient1]
              elif recipient3 == '':
                  recipients = [recipient1, recipient2]
              else:
                  recipients = [recipient1, recipient2, recipient3]
                  print(recipients)
              subject = "AWS Audit - Report Assessment Report"
              bucket_name = event['Records'][0]['s3']['bucket']['name']
              key = urllib.parse.unquote_plus(event['Records'][0]['s3']['object']['key'], encoding='utf-8')
              file_name = os.path.basename(key)
              tmp_filename = '/tmp/' + file_name
              s3.download_file(bucket_name, key, tmp_filename)
              print(file_name)
              attachment = tmp_filename
              principal_id = urllib.parse.unquote_plus(event['Records'][0]['userIdentity']['principalId'], encoding='utf-8')
              user = principal_id.split(':')[2]
              body_text = "AWS Audit - Report Assessment Summary\r\n User: " + user
              charset = "utf-8"
              to_recipient = recipients[0]
              msg = MIMEMultipart('mixed')
              msg['Subject'] = subject
              msg['From'] = sender
              msg['To'] = to_recipient
              msg_body = MIMEMultipart('alternative')
              textpart = MIMEText(body_text.encode(charset), 'plain', charset)
              htmlpart = MIMEText(body_text.encode(charset), 'html', charset)
              msg_body.attach(textpart)
              msg_body.attach(htmlpart)
              att = MIMEApplication(open(attachment, 'rb').read())
              att.add_header('Content-Disposition','attachment',filename=os.path.basename(attachment))
              msg.attach(msg_body)
              msg.attach(att)
              try:
                  #Provide the contents of the email.
                  response = ses.send_raw_email(
                      Source=sender,
                      Destinations=recipients,
                      RawMessage={
                          'Data':msg.as_string()
                      },
                  )
              # Display an error if something goes wrong.
              except ClientError as e:
                  print(e.response['Error']['Message'])
              else:
                  print("Email sent! Message ID:"),
                  print(response['MessageId'])
      Environment:
        Variables:
          source_email: !Ref SourceEmail
          recipient1: !Ref AddrEmail1
          recipient2: !Ref AddrEmail2
          recipient3: !Ref AddrEmail3
      FunctionName: !Sub '${ReportBucketName}-SendEmail'
      Description: Function for send the report through email
      Handler: index.lambda_handler
      Role: !GetAtt 'LambdaRole.Arn'
      Runtime: python3.9
      Timeout: 300
  LambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt 'SendEmail.Arn'
      Action: lambda:InvokeFunction
      Principal: s3.amazonaws.com
      SourceAccount: !Ref 'AWS::AccountId'
      SourceArn: !Sub 'arn:${AWS::Partition}:s3:::${ReportBucketName}'

  LogGroupSendEmailLambda:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName:  !Sub '${ReportBucketName}-SendEmail'
      RetentionInDays: 7

  LogGroupCustomResourceS3:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName:  !Sub '${AWS::StackName}-${AWS::Region}-LambdaCustomResource'
      RetentionInDays: 7